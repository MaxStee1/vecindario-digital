generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Rol {
  admin
  locatario
  comprador
  repartidor
}

enum MetodoEntrega {
  envio
  retiro
}

enum EstadoPedido {
  pendiente
  enviado
  entregado
  cancelado
}

model Usuario {
  id          Int      @id @default(autoincrement())
  nombre      String
  email       String   @unique
  contrasenia String
  rol         Rol
  direccion   String?
  telefono    String?
  CreatedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  eliminado    Boolean  @default(false)

  locatario Locatario?
  comprador Comprador?
  repartidor Repartidor?
}

model Locatario {
  id                 Int             @id @default(autoincrement())
  usuarioId          Int             @unique
  usuario            Usuario         @relation(fields: [usuarioId], references: [id])
  nombreTienda       String
  descripcion        String?
  direccionTienda    String
  horarioApertura    String?
  horarioCierre      String?
  puntajeVisibilidad Int             @default(100)
  fechaRegistro      DateTime        @default(now())
  metodosEntrega     MetodoEntrega[]

  productos    Producto[]
  proveedores  Proveedor[] @relation("ProveedorLocatario")
  pedidos      PedidoLocatario[]
  categorias  Categoria[]
}

model Comprador {
  id               Int     @id @default(autoincrement())
  usuarioId        Int     @unique
  usuario          Usuario @relation(fields: [usuarioId], references: [id])
  direccionEntrega String?
  carrito          CarritoItem[]

  pedidos      Pedido[]
  valoraciones Valoracion[]
}

model Repartidor {
  id          Int      @id @default(autoincrement())
  usuarioId   Int      @unique
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  disponible  Boolean  @default(true)
  ubicacionActual String?
  pedidosAsignados Pedido[]
}

model Producto {
  id            Int       @id @default(autoincrement())
  nombre        String
  descripcion   String?
  precio        Int
  stock         Int
  locatarioId   Int
  locatario     Locatario @relation(fields: [locatarioId], references: [id])
  fechaCreacion DateTime  @default(now())
  fechaEdicion  DateTime?  @updatedAt
  imagenUrl     String?

  carrito CarritoItem[]
  pedidos  PedidoProducto[]
  valoraciones Valoracion[]
  categorias Categoria[]
}

// podria sere una lista de categorias para no hacer la relacion
model Categoria {
  id          Int       @id @default(autoincrement())
  nombre      String
  locatarioId Int
  locatario   Locatario @relation(fields: [locatarioId], references: [id])
  productos   Producto[]
}

model Pedido {
  id               Int           @id @default(autoincrement())
  compradorId      Int
  comprador        Comprador     @relation(fields: [compradorId], references: [id])
  repartidorId    Int?
  repartidor      Repartidor?   @relation(fields: [repartidorId], references: [id])
  direccionEntrega String?
  fechaPedido      DateTime      @default(now())
  fechaEntrega     DateTime?
  estado           EstadoPedido
  total            Int
  notas            String?
  productos        PedidoProducto[]
  ventasLocatario  PedidoLocatario[]
}

model PedidoProducto {
  pedidoId    Int
  productoId  Int
  cantidad    Int
  precio      Int   // precio total cantidad * precio unitario
  pedido      Pedido    @relation(fields: [pedidoId], references: [id])
  producto    Producto  @relation(fields: [productoId], references: [id])

  @@id([pedidoId, productoId])
}

model PedidoLocatario {
  pedidoId    Int
  locatarioId Int
  pedido      Pedido    @relation(fields: [pedidoId], references: [id])
  locatario   Locatario @relation(fields: [locatarioId], references: [id])
  total       Int          // total de la venta para el locatario
  estado      EstadoPedido

  @@id([pedidoId, locatarioId])
}

model Valoracion {
  id           Int           @id @default(autoincrement())
  comprador    Comprador     @relation(fields: [compradorId], references: [id])
  compradorId  Int
  producto     Producto      @relation(fields: [productoId], references: [id])
  productoId   Int
  calificacion Int
  comentario   String?
  fecha        DateTime      @default(now())
  tipoEntrega  MetodoEntrega
}

model CarritoItem {
  id            Int      @id @default(autoincrement())
  compradorId   Int
  productoId    Int
  cantidad      Int      @default(1)
  comprador     Comprador  @relation(fields: [compradorId], references: [id])
  producto      Producto @relation(fields: [productoId], references: [id])

  @@unique([compradorId, productoId])
}

model Proveedor {
  id          Int      @id @default(autoincrement())
  nombre      String
  email       String   @unique
  CreatedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  locatarios  Locatario[] @relation("ProveedorLocatario")
}